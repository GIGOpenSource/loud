"""
Django settings for loud project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-your-secret-key-here')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,testserver', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Django Sites framework (allauth需要)
    
    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    'corsheaders',
    'django_extensions',
    'channels',  # WebSocket支持
    'drf_spectacular',  # API文档生成
    
    # Django Allauth (社交登录)
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.telegram',  # Telegram登录提供商
    
    # Local apps
    'authentication',
    'users',
    'base',  # 基础模块架构
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'utils.csrf.CustomCsrfViewMiddleware',  # 自定义CSRF中间件
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Allauth账户中间件
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'utils.logging.APILoggingMiddleware',  # API日志中间件
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

# Channels配置（WebSocket支持）
ASGI_APPLICATION = 'main.asgi.application'

# 使用Redis作为Channel Layer
import os
REDIS_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
REDIS_HOST = os.environ.get('REDIS_HOST', 'localhost')
REDIS_PORT = int(os.environ.get('REDIS_PORT', 6379))

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [REDIS_URL],
        },
    },
}


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

import dj_database_url
import os

# 获取数据库URL，默认为SQLite（本地开发），Docker环境使用PostgreSQL
DATABASE_URL = os.environ.get('DATABASE_URL', 'sqlite:///' + str(BASE_DIR / 'db.sqlite3'))

DATABASES = {
    'default': dj_database_url.parse(DATABASE_URL, conn_max_age=600)
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Custom user model
AUTH_USER_MODEL = 'authentication.User'

# Sites framework
SITE_ID = 1

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Django默认认证后端（用于Admin）
    'allauth.account.auth_backends.AuthenticationBackend',  # Allauth认证后端
    'authentication.authentication.ShortTokenBackend',  # 我们的短token认证后端
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'authentication.authentication.HybridAuthentication',  # 混合认证：cookie + token
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    # 自定义异常处理器
    'EXCEPTION_HANDLER': 'utils.exceptions.custom_exception_handler',
    # API文档生成
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',
}

# JWT密钥（供WebSocket认证使用）
JWT_SECRET_KEY = SECRET_KEY

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CORS_ALLOW_CREDENTIALS = True

# Session settings
SESSION_COOKIE_AGE = 60 * 60 * 24 * 7  # 7 days
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_SAVE_EVERY_REQUEST = False  # 避免频繁session更新
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # session在浏览器关闭时不自动过期

# CSRF settings
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'

# CSRF exemption for API endpoints
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Exempt API endpoints from CSRF protection
CSRF_EXEMPT_URLS = [
    r'^/api/.*$',  # All API endpoints
]

# Logging settings
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            'format': '{message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'maxBytes': 1024 * 1024 * 10,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'api_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'api.log',
            'maxBytes': 1024 * 1024 * 10,  # 10MB
            'backupCount': 5,
            'formatter': 'json',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'api': {
            'handlers': ['console', 'api_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# drf-spectacular settings (API文档配置)
SPECTACULAR_SETTINGS = {
    'TITLE': 'Loud API Documentation',
    'DESCRIPTION': """
    Loud 项目C端用户API接口文档
    
    ## 🎯 说明
    
    本文档仅包含C端用户相关功能接口。所有管理员操作请使用Django Admin后台管理。
    
    ## 🔐 认证方式
    
    本系统支持多种认证方式：
    
    1. **Cookie认证** (推荐) - 登录后自动管理token，支持在线测试
    2. **Token认证** - 使用HTTP Header传递token
    3. **Session认证** - Django默认session认证
    
    ## 🚀 快速开始
    
    1. 使用 `/api/auth/login/` 端点登录获取token
    2. 登录成功后，系统会自动设置cookie，可直接在文档中测试其他API
    3. 对于需要认证的接口，请确保已登录或提供有效的token
    
    ## 📋 主要模块
    
    - **🔑 认证模块** - 用户注册、登录、token管理
    - **👤 用户资料** - 个人信息、头像、联系方式管理
    - **⚙️ 用户偏好** - 主题、语言、通知配置等个性化设置
    - **💰 用户钱包** - 余额查询、充值、提现、转账等操作
    - **📊 交易记录** - 钱包交易历史、明细查询
    - **📈 用户仪表板** - 个人数据概览、统计信息
    
    ## ⚠️ 重要提醒
    
    - 本API仅供C端用户使用
    - 管理员功能请访问: /admin/
    - 如需技术支持，请联系开发团队
    """,
    'VERSION': '2.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'displayRequestDuration': True,
        'docExpansion': 'list',
        'filter': True,
        'showExtensions': True,
        'showCommonExtensions': True,
        'tryItOutEnabled': True,
    },
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': False,
        'hideHostname': False,
        'noAutoAuth': False,
        'nativeScrollbars': False,
        'pathInMiddlePanel': False,
        'requiredPropsFirst': True,
        'scrollYOffset': 0,
        'sortPropsAlphabetically': True,
        'suppressWarnings': True,
        'hideLoading': False,
        'theme': {
            'colors': {
                'primary': {
                    'main': '#1976d2'
                }
            }
        }
    },
    'COMPONENT_SPLIT_REQUEST': True,
    'COMPONENT_NO_READ_ONLY_REQUIRED': True,
    'SCHEMA_PATH_PREFIX': '/api/',
    'AUTHENTICATION_WHITELIST': [
        'rest_framework.authentication.SessionAuthentication',
        'authentication.authentication.HybridAuthentication',
    ],
    'SECURITY': [
        {
            'cookieAuth': [],
        },
        {
            'tokenAuth': [],
        }
    ],
    'APPEND_COMPONENTS': {
        'securitySchemes': {
            'cookieAuth': {
                'type': 'apiKey',
                'in': 'cookie',
                'name': 'sessionid',
                'description': 'Cookie认证 (推荐)：登录后自动管理，支持在线测试'
            },
            'tokenAuth': {
                'type': 'apiKey',
                'in': 'header',
                'name': 'Authorization',
                'description': 'Token认证：在Header中添加 "Token <your-token>"'
            }
        }
    },
    'TAGS': [
        {
            'name': 'Authentication',
            'description': '用户认证相关接口：注册、登录、token管理等'
        },
        {
            'name': 'User Profiles',
            'description': '用户资料管理：个人信息、头像、联系方式等'
        },
        {
            'name': 'User Preferences', 
            'description': '用户偏好设置：主题、语言、通知配置等'
        },
        {
            'name': 'User Wallets',
            'description': '用户钱包管理：余额、充值、提现、转账等'
        },
        {
            'name': 'Wallet Transactions',
            'description': '钱包交易记录：交易历史、明细查询等'
        },
        {
            'name': 'User Dashboard',
            'description': '用户仪表板：概览信息、统计数据等'
        },
        {
            'name': 'Social Authentication',
            'description': '第三方社交登录：Telegram等平台登录'
        }
    ],
}

# ====================================
# Django Allauth 配置（社交登录）
# ====================================

# Allauth 基础配置 (新版本配置格式)
ACCOUNT_LOGIN_METHODS = {'email', 'username'}  # 支持用户名或邮箱登录
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']  # 注册必需字段
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # 邮箱验证为可选
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'

# 登录重定向
LOGIN_REDIRECT_URL = '/api/auth/check/'  # 登录后重定向到认证检查
LOGOUT_REDIRECT_URL = '/'  # 登出后重定向到首页

# Allauth 会话配置
ACCOUNT_SESSION_REMEMBER = True  # 记住登录状态
ACCOUNT_LOGOUT_ON_GET = False  # GET请求不能直接登出（安全考虑）

# 社交账户配置
SOCIALACCOUNT_AUTO_SIGNUP = True  # 自动创建账户
SOCIALACCOUNT_EMAIL_REQUIRED = True  # 社交登录需要邮箱
SOCIALACCOUNT_EMAIL_VERIFICATION = 'optional'  # 社交登录邮箱验证可选

# 禁用allauth的一些默认表单，使用我们自己的API
ACCOUNT_FORMS = {
    'login': 'allauth.account.forms.LoginForm',
    'signup': 'allauth.account.forms.SignupForm',
    'change_password': 'allauth.account.forms.ChangePasswordForm',
    'reset_password': 'allauth.account.forms.ResetPasswordForm',
    'reset_password_from_key': 'allauth.account.forms.ResetPasswordKeyForm',
}

# Telegram 社交登录配置
SOCIALACCOUNT_PROVIDERS = {
    'telegram': {
        'VERIFIED_EMAIL': False,  # Telegram不提供验证的邮箱
        'VERSION': 'v1',  # Telegram Bot API版本
        'METHOD': 'js_sdk',  # 使用Telegram JS SDK方式
    }
}

# Telegram Bot 配置（从环境变量获取）
TELEGRAM_BOT_TOKEN = config('TELEGRAM_BOT_TOKEN', default='')
TELEGRAM_BOT_NAME = config('TELEGRAM_BOT_NAME', default='YourBotName')

# 自定义社交登录成功后的处理
SOCIALACCOUNT_ADAPTER = 'authentication.adapters.CustomSocialAccountAdapter'

# API访问配置（兼容我们现有的token系统）
ALLAUTH_API_ONLY = True  # 仅API模式，不使用默认模板
